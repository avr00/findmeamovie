{"version":3,"sources":["header/Header.js","main/navigation/Selection.js","main/navigation/Slider.js","main/navigation/Button.js","main/navigation/Navigation.js","main/movies/MovieListItem.js","main/movies/Movies.js","main/Main.js","movie/LoadingMovie.js","movie/Movie.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Selection","props","value","genre","onChange","onGenreChange","genres","map","key","id","name","Slider","range","_this","type","data","label","_this$props$data","this","min","max","step","className","js_default","minValue","maxValue","Component","Button","onClick","children","Navigation","genresURL","concat","process","fetch","then","response","json","setGenres","catch","error","console","log","_this$props","year","rating","runtime","main_navigation_Selection","main_navigation_Slider","main_navigation_Button","onSearchButtonClick","React","MovieListItem","_props$movie","movie","title","poster_path","release_date","vote_average","imgUrl","substring","Link","to","src","alt","Movies","movies","main_movies_MovieListItem","onPageDecrease","page","onPageIncrease","Main","state","total_pages","moviesUrl","setState","Object","defineProperty","objectSpread","event","target","generateUrl","params","selectedGenre","find","genreId","fetchMovies","url","storeMovies","results","result","vote_count","genre_ids","_this$state","nextPage","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","getStateFromLocalStorage","parse","getItem","savedState","length","nextProps","nextState","main_navigation_Navigation","assign","main_movies_Movies","LoadingMovie","Movie","isLoading","_this2","movieId","match","movieUrl","_this$state$movie","backdrop_path","overview","releaseYear","backgroundStyle","backgroundImage","movie_LoadingMovie","style","index","NotFound","App","BrowserRouter","src_header_Header","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.641374b6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.scss\";\r\n\r\nconst Header = () => (\r\n  <header>\r\n    <h1>Find Me A Movie</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Selection.scss\";\r\n\r\nconst Selection = props => {\r\n  return (\r\n    <select value={props.genre} onChange={props.onGenreChange}>\r\n      {props.genres.map(genre => {\r\n        return (\r\n          <option key={genre.id} value={genre.name}>\r\n            {genre.name}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default Selection;\r\n","import React, { Component } from \"react\";\r\nimport InputRange from \"react-input-range\";\r\nimport \"react-input-range/lib/css/index.css\";\r\nimport \"./Slider.scss\";\r\n\r\nclass Slider extends Component {\r\n  onChange = range => {\r\n    this.props.onChange({\r\n      type: this.props.data.label,\r\n      value: range\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { min, max, step, value, label } = this.props.data;\r\n    return (\r\n      <div className=\"slider\">\r\n        <label>{label}</label>\r\n        <InputRange\r\n          minValue={min}\r\n          maxValue={max}\r\n          step={step}\r\n          onChange={this.onChange}\r\n          value={value}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Slider;\r\n","import React from \"react\";\r\nimport \"./Button.scss\";\r\n\r\nconst Button = props => (\r\n  <div className=\"search-button\">\r\n    <button onClick={props.onClick}>{props.children}</button>\r\n  </div>\r\n);\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Navigation.scss\";\r\nimport Selection from \"./Selection\";\r\nimport Slider from \"./Slider\";\r\nimport Button from \"./Button\";\r\n\r\nclass Navigation extends React.Component {\r\n  componentDidMount() {\r\n    const genresURL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${\r\n      process.env.REACT_APP_TMDB_API_KEY\r\n    }&language=en-US`;\r\n    fetch(genresURL)\r\n      .then(response => response.json())\r\n      .then(data => this.props.setGenres(data.genres))\r\n      .catch(error => console.log(error));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      genre,\r\n      genres,\r\n      onGenreChange,\r\n      onChange,\r\n      year,\r\n      rating,\r\n      runtime\r\n    } = this.props;\r\n    return (\r\n      <section className=\"navigation\">\r\n        <Selection\r\n          onGenreChange={onGenreChange}\r\n          genre={genre}\r\n          genres={genres}\r\n        />\r\n\r\n        <Slider data={year} onChange={onChange} />\r\n        <Slider data={rating} onChange={onChange} />\r\n        <Slider data={runtime} onChange={onChange} />\r\n\r\n        <Button onClick={this.props.onSearchButtonClick}>Search</Button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport \"./MovieListItem.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MovieListItem = props => {\r\n  const { id, title, poster_path, release_date, vote_average } = props.movie;\r\n  const imgUrl = `https://image.tmdb.org/t/p/w342/${poster_path}`;\r\n  const year = release_date.substring(0, 4);\r\n  return (\r\n    <li className=\"movie-item\">\r\n      <Link to={`/movies/${id}`} className=\"thumbnail\">\r\n        <img src={imgUrl} alt=\"movieImage\" />\r\n\r\n        <div className=\"movie-description\">\r\n          <h2>{title}</h2>\r\n\r\n          <section className=\"movie-details\">\r\n            <div className=\"movie-year\">\r\n              <span className=\"title\">Year</span>\r\n              <span className=\"num\">{year}</span>\r\n            </div>\r\n\r\n            <div className=\"movie-rating\">\r\n              <span className=\"title\">Rating</span>\r\n              <span className=\"num\">{vote_average}</span>\r\n            </div>\r\n          </section>\r\n        </div>\r\n      </Link>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default MovieListItem;\r\n","import React from \"react\";\r\nimport \"./Movies.scss\";\r\nimport MovieListItem from \"./MovieListItem\";\r\nimport Button from \"../navigation/Button\";\r\n\r\nconst Movies = props => {\r\n  return (\r\n    <section className=\"movies\">\r\n      <ul className=\"movies\">\r\n        {props.movies.map(movie => {\r\n          return <MovieListItem key={movie.id} movie={movie} />;\r\n        })}\r\n      </ul>\r\n      <div className=\"pagination\">\r\n        <Button onClick={props.onPageDecrease}>Previous</Button>\r\n        <span>{`Page ${props.page}`}</span>\r\n        <Button onClick={props.onPageIncrease}>Next</Button>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n","import React from \"react\";\r\nimport \"./Main.scss\";\r\nimport Navigation from \"./navigation/Navigation\";\r\nimport Movies from \"./movies/Movies\";\r\n\r\nclass Main extends React.Component {\r\n  state = {\r\n    movies: [],\r\n    total_pages: 1,\r\n    genre: \"comedy\",\r\n    genres: [],\r\n    page: 1,\r\n    moviesUrl: `https://api.themoviedb.org/3/discover/movie?api_key=${\r\n      process.env.REACT_APP_TMDB_API_KEY\r\n    }&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`,\r\n    year: {\r\n      label: \"year\",\r\n      min: 1990,\r\n      max: 2018,\r\n      step: 1,\r\n      value: { min: 2000, max: 2017 }\r\n    },\r\n    rating: {\r\n      label: \"rating\",\r\n      min: 0,\r\n      max: 10,\r\n      step: 1,\r\n      value: { min: 8, max: 10 }\r\n    },\r\n    runtime: {\r\n      label: \"runtime\",\r\n      min: 0,\r\n      max: 300,\r\n      step: 15,\r\n      value: { min: 60, max: 120 }\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const savedState = this.getStateFromLocalStorage();\r\n    if (!savedState || (savedState && !savedState.movies.length)) {\r\n      this.fetchMovies(this.state.moviesUrl);\r\n    } else {\r\n      this.setState({ ...savedState });\r\n      this.generateUrl(savedState);\r\n    }\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    this.saveStateToLocalStorage();\r\n    if (this.state.moviesUrl !== nextState.moviesUrl) {\r\n      this.fetchMovies(nextState.moviesUrl);\r\n    }\r\n    if (this.state.page !== nextState.page) {\r\n      this.generateUrl(nextState);\r\n    }\r\n  }\r\n\r\n  onChange = data => {\r\n    this.setState({\r\n      [data.type]: {\r\n        ...this.state[data.type],\r\n        value: data.value\r\n      }\r\n    });\r\n  };\r\n\r\n  onGenreChange = event => {\r\n    this.setState({ genre: event.target.value });\r\n  };\r\n\r\n  setGenres = genres => {\r\n    this.setState({ genres });\r\n  };\r\n\r\n  generateUrl = params => {\r\n    const { genres, year, rating, runtime, page } = params;\r\n    const selectedGenre = genres.find(genre => genre.name === params.genre);\r\n    const genreId =\r\n      typeof selectedGenre === \"undefined\" ? 28 : selectedGenre.id;\r\n\r\n    const moviesUrl =\r\n      `https://api.themoviedb.org/3/discover/movie?` +\r\n      `api_key=${process.env.REACT_APP_TMDB_API_KEY}&` +\r\n      `language=en-US&sort_by=popularity.desc&` +\r\n      `with_genres=${genreId}&` +\r\n      `primary_release_date.gte=${year.value.min}-01-01&` +\r\n      `primary_release_date.lte=${year.value.max}-12-31&` +\r\n      `vote_average.gte=${rating.value.min}&` +\r\n      `vote_average.lte=${rating.value.max}&` +\r\n      `with_runtime.gte=${runtime.value.min}&` +\r\n      `with_runtime.lte=${runtime.value.max}&` +\r\n      `page=${page}`;\r\n\r\n    this.setState({ moviesUrl });\r\n    console.log(moviesUrl);\r\n  };\r\n\r\n  onSearchButtonClick = () => {\r\n    this.generateUrl(this.state);\r\n  };\r\n\r\n  fetchMovies = url => {\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => this.storeMovies(data))\r\n      .catch(error => console.log(error));\r\n  };\r\n\r\n  storeMovies = data => {\r\n    const movies = data.results.map(result => {\r\n      const {\r\n        vote_count,\r\n        id,\r\n        genre_ids,\r\n        poster_path,\r\n        title,\r\n        vote_average,\r\n        release_date\r\n      } = result;\r\n      return {\r\n        vote_count,\r\n        id,\r\n        genre_ids,\r\n        poster_path,\r\n        title,\r\n        vote_average,\r\n        release_date\r\n      };\r\n    });\r\n    this.setState({ movies, total_pages: data.total_pages });\r\n  };\r\n\r\n  onPageIncrease = () => {\r\n    const { page, total_pages } = this.state;\r\n    const nextPage = page + 1;\r\n    if (nextPage <= total_pages) {\r\n      this.setState({ page: nextPage });\r\n    }\r\n  };\r\n\r\n  onPageDecrease = () => {\r\n    const nextPage = this.state.page - 1;\r\n    if (nextPage > 0) {\r\n      this.setState({ page: nextPage });\r\n    }\r\n  };\r\n\r\n  saveStateToLocalStorage = () => {\r\n    localStorage.setItem(\"findmeamovie.params\", JSON.stringify(this.state));\r\n  };\r\n\r\n  getStateFromLocalStorage = () => {\r\n    return JSON.parse(localStorage.getItem(\"findmeamovie.params\"));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"main\">\r\n        <Navigation\r\n          onGenreChange={this.onGenreChange}\r\n          onChange={this.onChange}\r\n          setGenres={this.setGenres}\r\n          onSearchButtonClick={this.onSearchButtonClick}\r\n          {...this.state}\r\n        />\r\n        <Movies\r\n          movies={this.state.movies}\r\n          page={this.state.page}\r\n          onPageDecrease={this.onPageDecrease}\r\n          onPageIncrease={this.onPageIncrease}\r\n        />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nconst LoadingMovie = () => <h2>Loading Movie...</h2>;\r\n\r\nexport default LoadingMovie;\r\n","import React from \"react\";\r\nimport \"./Movie.scss\";\r\nimport LoadingMovie from \"./LoadingMovie\";\r\n\r\nclass Movie extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    movie: {}\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { movieId } = this.props.match.params;\r\n    const movieUrl = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${\r\n      process.env.REACT_APP_TMDB_API_KEY\r\n    }&language=en-US`;\r\n    fetch(movieUrl)\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ movie: data, isLoading: false }))\r\n      .catch(error => console.log(\"Error:\", error));\r\n\r\n    console.log(this.state.movie, movieUrl);\r\n  }\r\n\r\n  render() {\r\n    const { isLoading } = this.state;\r\n    const {\r\n      title,\r\n      backdrop_path,\r\n      release_date,\r\n      genres,\r\n      overview,\r\n      vote_average,\r\n      runtime\r\n    } = this.state.movie;\r\n\r\n    const releaseYear = release_date ? release_date.substring(0, 4) : null;\r\n    const imgUrl = `http://image.tmdb.org/t/p/w1280/${backdrop_path}`;\r\n    const backgroundStyle = {\r\n      backgroundImage: `url(${imgUrl})`\r\n    };\r\n\r\n    return (\r\n      <div className=\"movie-page\">\r\n        {isLoading ? (\r\n          <LoadingMovie />\r\n        ) : (\r\n          <div>\r\n            <div className=\"movie-image\" style={backgroundStyle} />\r\n            <div className=\"movie-details\">\r\n              <h1>\r\n                {title}\r\n                <span>({releaseYear})</span>\r\n              </h1>\r\n              <section className=\"genres\">\r\n                {genres.map((genre, index) => (\r\n                  <div className=\"genre\" key={genre.id}>\r\n                    <span>{genre.name}</span>\r\n                    {index < genres.length - 1 && (\r\n                      <span className=\"separator\">|</span>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </section>\r\n              <h5>\r\n                Rating:\r\n                <span>{vote_average}</span>\r\n              </h5>\r\n              <h5>\r\n                Runtime:\r\n                <span>{`${runtime} min`}</span>\r\n              </h5>\r\n              <h4>Overview</h4>\r\n              <p>{overview}</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = () => (\r\n  <div>\r\n    <h3>We couldn't find what you were looking for :(</h3>\r\n    <Link to=\"/\">Here you can browse the movies</Link>\r\n  </div>\r\n);\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Header from \"./header/Header\";\nimport Main from \"./main/Main\";\nimport Movie from \"./movie/Movie\";\nimport NotFound from \"./NotFound\";\n\nconst App = () => {\n  console.log(\"API key:\", process.env.REACT_APP_TMDB_API_KEY);\n  return (\n    <BrowserRouter>\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n          <Route path=\"/movies/:movieId\" component={Movie} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}